---
- name: Bachelor Project Setup Playbook
  hosts: localhost
  gather_facts: no
  vars:
    # Root Path
    path: "{{ playbook_dir }}/.."
  vars_prompt:
    - name: setup
      prompt: "Set up and configure Istio, Kong, Kong Enterprise or Vanilla? (i/k/ke/v)"
      private: no


  tasks:
    - block:
    # Setup minikube cluster
      - name: Start Docker Desktop
        command: open -j /Applications/Docker.app

      - name: Stop Minikube Cluster
        command: minikube stop
        ignore_errors: yes
        register: minikube_stop_result
      - name: Check if stopping minikube failed due to it not running
        fail:
          msg: "Failed to stop minikube. Error: {{ minikube_stop_result.stdout }}"
        when: minikube_stop_result.failed and ("Profile \"minikube\" not found" not in minikube_stop_result.stdout)

      - name: Delete Minikube Cluster
        command: minikube delete
        ignore_errors: no
        register: minikube_delete_result
      - name: Check if deleten minikube failed due to non existing profile
        fail:
          msg: "Failed to delete minikube profile. Error: {{ minikube_delete_result.stdout }}"
        when: minikube_delete_result.failed and ('No minikube profile was found' not in minikube_delete_result.stdout)

      - name: Start Minikube
        command: minikube start --memory=8192mb --cpus=4

      - name: Build 1st Image
        command: docker build -f app1/Dockerfile -t app1 .
        args:
         chdir: "{{ path }}/go"
      - name: Build 2nd Image
        command: docker build -f app2/Dockerfile -t app2 .
        args:
          chdir: "{{ path }}/go"
      - name: Build 3rd Image
        command: docker build -f app3/Dockerfile -t app3 .
        args:
          chdir: "{{ path }}/go"

      # - name: Build Docker Image
      #   docker_image:
      #     name: app1
      #     build:
      #       path: "{{ path }}/go/app1"
      #     source: build
      #   register: docker_build_result

      - name: Create a directory if it does not exist
        file:
          path: "{{ path }}/artifacts"
          state: directory
          mode: "0755"

      - name: Save to app1.tar
        command: docker save --output artifacts/app1.tar app1
        args:
         chdir: "{{ path }}"
      - name: Save to app2.tar
        command: docker save --output artifacts/app2.tar app2
        args:
          chdir: "{{ path }}"
      - name: Save to app3.tar
        command: docker save --output artifacts/app3.tar app3
        args:
          chdir: "{{ path }}"

      # - name: Save Docker Image
      #   command: docker save -o app1.tar app1
      #   args:
      #     chdir: "{{ path }}/artifacts"
      #   when: docker_build_result.changed

      - name: Load 1st Image into Minikube VM
        command: minikube image load artifacts/app1.tar
        args:
          chdir: "{{ path }}"
      - name: Load 2nd Image into Minikube VM
        command: minikube image load artifacts/app2.tar
        args:
          chdir: "{{ path }}"
      - name: Load 3rd Image into Minikube VM
        command: minikube image load artifacts/app3.tar
        args:
          chdir: "{{ path }}"


    - block:
      # Deploy Kubernetes Components
      - name: Create Kubernetes Services
        command: kubectl create -f kubernetes/services.yaml
        args:
          chdir: "{{ path }}"

      - name: Create Service Accounts
        command: kubectl create -f kubernetes/service-accounts.yaml
        args:
          chdir: "{{ path }}"

      - name: Create Deployments
        command: kubectl create -f kubernetes/deployments.yaml
        args:
          chdir: "{{ path }}"


    - block:
      - include_tasks: istio/istio.yaml
        when: setup == 'i'

    - block:
      - include_tasks: istio/istio-observability.yaml
        when: setup == 'i'

    - block:
      - include_tasks: kong/db-less/kong.yaml
      when: setup == 'k'

    - block:
      - include_tasks: kong/kong-enterprise.yaml
      when: setup == 'ke'

    - block:
      - include_tasks: kong/kong-key-auth.yaml
      when: setup == 'ke'

    - block:
      - include_tasks: kong/kong-acl.yaml
      when: setup == 'ke'

    - block:
      - include_tasks: observability.yaml
      when: setup == 'k' or setup == 'ke' or setup == 'v'