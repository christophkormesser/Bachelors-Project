# Kong Setup
- name: Setup Kong
  debug:
    msg: "Setting up Kong Enterprise..."

- name: Add Gateway API CRDs
  command: kubectl apply -f kubernetes/kong/standard-install.yaml
  args:
    chdir: "{{ path }}"

- name: Apply Gatway Class & Gateway Configuration
  command: kubectl apply -f kubernetes/kong/gateway.yaml
  args:
    chdir: "{{ path }}"

- name: Add Kong Helm Repo
  command: helm repo add kong https://charts.konghq.com

- name: Update Helm (Kong)
  command: helm repo update

- name: Create Kong Namespace
  command: kubectl create namespace kong

- name: Create Secret for Enterprise License Free Mode
  command: kubectl create secret generic kong-enterprise-license --from-literal=license="'{}'" -n kong

- name: Create Key & Certificate
  command: openssl req -new -x509 -nodes -newkey ec:<(openssl ecparam -name secp384r1) -keyout ./tls.key -out ./tls.crt -days 1095 -subj "/CN=kong_clustering"
  args:
    chdir: "{{ path }}/kubernetes/kong/tls"

- name: Create Secret for Key & Certificate
  command: kubectl create secret tls kong-cluster-cert --cert=./tls.crt --key=./tls.key -n kong
  args:
    chdir: "{{ path }}/kubernetes/kong/tls"

- name: Helm Install Kong Control Plane with values-cp.yaml
  shell: helm install kong-cp kong/kong -n kong --values ./values-cp.yaml
  args:
    chdir: "{{ path }}/kubernetes/kong/values"

- name: Ensure Control Plane is Running
  command: kubectl get pods -l app=kong-cp-kong -n kong -o jsonpath='{.items[0].status.containerStatuses[0].ready}'
  register: kong_pod_status
  until: kong_pod_status.stdout == 'true'
  retries: 15
  delay: 10

- name: Test Kong Gateway
  shell: kubectl exec pod/{{ pod_name.stdout }} -- curl -v http://{{ Gateway_IP.stdout }}/app2
  register: Kong_Test_Result

- name: Show Kong Gateway Test grafana_api_key_response
  debug:
    msg: "{{ Kong_Test_Result.stdout }}"