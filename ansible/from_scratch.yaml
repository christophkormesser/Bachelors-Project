---
- name: Bachelor Project Setup Playbook
  hosts: localhost
  gather_facts: no
  vars:
    # Root Path
    path: "/Users/christoph/Code/FH/5. Semester/Individualprojekt"
  vars_prompt:
    - name: setup_istio
      prompt: "Set up and configure Istio? (y/n)"
      private: no

    - name: setup_observability_tools
      prompt: "Set up observability tools for Istio (Prometheus, Jaeger, Kiali, Grafana)? (y/n)"
      private: no

    - name: setup_kong
      prompt: "Set up and configure Kong? (y/n)"
      private: no

    - name: setup_observability_kong
      prompt: "Set up observability tools for Kong (Prometheus & Grafana)? (y/n)"
      private: no

  tasks:
    - block:
    # Setup minikube cluster
      - name: Start Docker Desktop
        command: open -j /Applications/Docker.app

      - name: Start Minikube
        command: minikube start --memory=8192mb --cpus=4

      - name: Build Docker Image
        command: docker build -t fastapi .
        args:
          chdir: "{{ path }}"

      - name: Save to fastapi.tar
        command: docker save --output fastapi.tar fastapi
        args:
          chdir: "{{ path }}"

      - name: Load Image into Minikube VM
        command: minikube image load fastapi.tar
        args:
          chdir: "{{ path }}"


    - block:
      # Deploy Kubernetes Components
      - name: Create Kubernetes Services
        command: kubectl create -f kubernetes/services.yaml
        args:
          chdir: "{{ path }}"

      - name: Create Service Accounts
        command: kubectl create -f kubernetes/service-accounts.yaml
        args:
          chdir: "{{ path }}"

      - name: Create Deployments
        command: kubectl create -f kubernetes/deployments.yaml
        args:
          chdir: "{{ path }}"


    - block:
      # Istio Setup
      - name: Setup Istio
        debug:
          msg: "Setting up Istio..."

      - name: Enable Istio Provisioner
        command: minikube addons enable istio-provisioner

      - name: Enable Istio
        command: minikube addons enable istio

      - name: Label Namespace for Istio
        command: kubectl label namespace default istio-injection=enabled

      - name: Restart Pods in Default Namespace
        command: kubectl delete pods --all -n default

      - name: Apply Istio Policies
        command: kubectl apply -f kubernetes/istio/
        args:
          chdir: "{{ path }}"

      when: setup_istio == 'y'


    - block:
      # Istio Observability
      - name: Setup Observability for Istio
        debug:
          msg: "Setting up Observability for Istio..."

      - name: Set Up Prometheus
        command: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/prometheus.yaml

      - name: Set Up Jaeger
        command: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/jaeger.yaml

      - name: Set Up Kiali
        command: helm install --namespace istio-system --set auth.strategy="anonymous" --repo https://kiali.org/helm-charts kiali-server kiali-server

      - name: Set Up Grafana
        command: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/grafana.yaml

      - name: Alert user to import config file in /config into Grafana
        debug:
          msg: Import the dashboard json file from config/Requests-1703960621987.json

      - name: Alert user to use Jaeger URL
        debug:
          msg: Query URL for Jaeger':' http://tracing.istio-system.svc.cluster.local:80

      when: setup_observability_tools == 'y'


    - block:
      # Kong
      - name: Setup Kong
        debug:
          msg: "Setting up Kong..."

      - name: Add Gateway API CRDs
        command: kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml
        args:
          chdir: "{{ path }}"

      - name: Apply Gatway Class & Gateway Configuration
        command: kubectl apply -f kubernetes/kong/gateway.yaml
        args:
          chdir: "{{ path }}"

      - name: Add Kong Helm Repo
        command: helm repo add kong https://charts.konghq.com

      - name: Update Helm (Kong)
        command: helm repo update

      - name: Install Kong
        command: helm install kong kong/ingress -n kong --create-namespace

      - name: Alert User to test Kong
        debug:
          msg: "Continue with README: Test Installation (after all nodes are up)"

      - name: Create HTTPRoute
        command: kubectl apply -f kubernetes/kong/httproute.yaml
        args:
          chdir: "{{ path }}"

      - name: Create Ingress
        command: kubectl apply -f kubernetes/kong/ingress.yaml
        args:
          chdir: "{{ path }}"

      when: setup_kong == 'y'


    - block:
      # Observability Kong
      - name: Set Up Observability for Kong
        debug:
          msg: "Setting up Observability for Kong..."

      - name: Add Prometheus Helm Repositories
        command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

      - name: Add Grafana Helm Repository
        command: helm repo add grafana https://grafana.github.io/helm-charts

      - name: Create Prometheus namespaces
        command: kubectl create namespace prometheus

      - name: Create Grafana namespace
        command: kubectl create namespace grafana

      - name: Install Prometheus
        command: helm install prometheus prometheus-community/prometheus --namespace prometheus

      - name: Install Grafana
        command: helm install grafana grafana/grafana --namespace grafana

      - name: Wait for Grafana pods to be up
        command: kubectl get pods -l app.kubernetes.io/name=grafana -n grafana -o jsonpath='{.items[*].status.phase}'
        register: grafana_pod_status
        until: grafana_pod_status.stdout == 'Running'
        retries: 15
        delay: 10
#      - name: Inform User About Grafana Access
#        debug:
#          msg: "Continue with README: Access Grafana"

      - name: Port Forward Grafana
        command: kubectl port-forward --namespace grafana service/grafana 3000:80
        async: 1800
        poll: 0

      - name: Get Grafana Admin Password
        shell: kubectl get secret --namespace grafana grafana -o jsonpath="{.data.admin-password}" | base64 --decode
        register: grafana_admin_password

      - name: Generate Grafana API Key
        uri:
          url: "http://localhost:3000/api/auth/keys"
          method: POST
          body: 
            name: "ansible-generated-key"
            role: "Admin"
          body_format: json
          headers:
            Content-Type: "application/json"
            Authorization: "Basic {{ ('admin:' + grafana_admin_password.stdout) | b64encode }}"
          status_code: 200
          return_content: yes
        register: grafana_api_key_response

      - name: Extract API Key
        set_fact:
          grafana_api_key: "{{ (grafana_api_key_response.content | from_json).key }}"

      - name: Add Prometheus data source to Grafana
        uri:
          url: "http://localhost:3000/api/datasources"
          method: POST
          body: 
            name: "Prometheus"
            type: "prometheus"
            access: "proxy"
            url: "http://prometheus-server.prometheus.svc.cluster.local"
            jsonData:
              timeInterval: "5s"
          body_format: json
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer {{ grafana_api_key }}"
          status_code: 200

      when: setup_observability_kong == 'y'